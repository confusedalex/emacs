#+Title: Emacs Configuration
#+Author: confusedalex
#+STARTUP: content

* Table of Contents :TOC_4:
:PROPERTIES:
:VISIBILITY: all
:END:
- [[#use-package][Use Package]]
- [[#evil-mode][Evil Mode]]
- [[#good-defaults][Good Defaults]]
- [[#general-keybindings][General Keybindings]]
- [[#appearance][Appearance]]
  - [[#theme][Theme]]
  - [[#fonts][Fonts]]
    - [[#setting-up-fonts][Setting up fonts]]
    - [[#zooming-inout][Zooming In/Out]]
  - [[#modeline][Modeline]]
  - [[#whichkey][Whichkey]]
  - [[#dashboard][Dashboard]]
- [[#org-mode][Org Mode]]
  - [[#org-evil][Org-Evil]]
  - [[#org-tempo][Org Tempo]]
  - [[#org-superstar][Org Superstar]]
  - [[#org-super-agenda][Org Super Agenda]]
  - [[#org-journal][org-journal]]
  - [[#org-chef][org-chef]]
  - [[#org-toc][org-toc]]
- [[#other][Other]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#vertico-and-marginalia][Vertico and Marginalia]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
  - [[#orderless][Orderless]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]

* Use Package
#+begin_src emacs-lisp
  (require 'use-package-ensure) ;; Load use-package-always-ensure
  (setq use-package-always-ensure t) ;; Always ensures that a package is installed
  (setq package-archives '(("melpa" . "https://melpa.org/packages/") ;; Sets default package repositories
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/"))) ;; For Eat Terminal

#+end_src
* Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (evil-mode)
    :custom
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-undo-system 'undo-redo)
    (org-return-follows-link t)   ;; Sets the RETURN key in org-mode to follow links
    (evil-respect-visual-line-mode t)
    ;; Unmap keystroke in 'evil-maps. If not done, org-return-follows-link will not work
    :bind (:map evil-motion-state-map
                ("SPC" . nil)
                ("RET" . nil)
                ("TAB" . nil))
    )
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
* Good Defaults
#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (menu-bar-mode nil)         ;; Disable the menu bar
    (scroll-bar-mode nil)       ;; Disable the scroll bar
    (tool-bar-mode nil)         ;; Disable the tool bar

    (delete-selection-mode t)   ;; Select text and delete it by typing.
    (electric-indent-mode nil)  ;; Turn off the weird indenting that Emacs does by default.
    (electric-pair-mode t)      ;; Turns on automatic parens pairing

    (blink-cursor-mode nil)     ;; Don't blink cursor
    (global-auto-revert-mode t) ;; Automatically reload file and show changes if the file has changed

    (display-line-numbers-type 'relative) ;; Relative line numbers
    (global-display-line-numbers-mode t)  ;; Display line numbers

    (mouse-wheel-progressive-speed nil) ;; Disable progressive speed when scrolling
    (scroll-conservatively 10) ;; Smooth scrolling

    (setq backup-directory-alist `(("." . "~/.saves"))) ;; don't clutter my file tree

    (ispell-program-name nil)
    (text-mode-ispell-word-completion nil)

    (tab-width 4)
    (auto-save-default nil) ;; Stop creating # auto save files
    :hook
    (prog-mode . (lambda () (hs-minor-mode t))) ;; Enable folding hide/show globally
    :config
    ;; Move customization variables to a separate file and load it, avoid filling up init.el with unnecessary variables
    (setq custom-file (locate-user-emacs-file "custom-vars.el"))
    (load custom-file 'noerror 'nomessage)
    :bind (
           ([escape] . keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
           )
    )
#+end_src
* General Keybindings
#+begin_src emacs-lisp
  (use-package general
  :ensure t
  :config
  (general-evil-setup)
  (general-create-definer spc
    :states '(normal insert visual motion emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "C-SPC")

  (spc
    "f" '(:ignore t :wk "Find")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/configuration.org")) :wk "Edit emacs config")
    "f r" '(consult-recent-file :wk "Recent files")
    "f f" '(consult-fd :wk "Fd search for files")
    "f g" '(consult-ripgrep :wk "Ripgrep search in files")
    "f l" '(consult-line :wk "Find line")
    "f i" '(consult-imenu :wk "Imenu buffer locations"))

  (spc
    "o" '(:ignore t :wk "Org")
    "o n" '((lambda () (interactive) (find-file "~/persist/org/notes.org")) :wk "Open Notes")
    "o i" '((lambda () (interactive) (find-file "~/persist/org/inbox.org")) :wk "Open Inbox")
    "o w" '((lambda () (interactive) (find-file "~/persist/org/work.org")) :wk "Open Inbox")
    "o a" '(org-agenda :wk "Opens org agenda")
    "o c" '(org-capture :wk "Org Capture"))
  )
#+end_src

* Appearance
** Theme
#+begin_src emacs-lisp
      (use-package gruvbox-theme
      :config
      (load-theme 'gruvbox-dark-hard t))
#+end_src
** Fonts
*** Setting up fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "JetBrainsMono Nerd Font"
                      :height 120
                      :weight 'medium)

  (add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font")) ;; Set your favorite font
  (setq-default line-spacing 0.12)
#+end_src

*** Zooming In/Out
#+begin_src emacs-lisp
    (use-package emacs
      :bind
      ("C-+" . text-scale-increase)
      ("C--" . text-scale-decrease)
      ("<C-wheel-up>" . text-scale-increase)
      ("<C-wheel-down>" . text-scale-decrease))
#+end_src

** Modeline
#+begin_src emacs-lisp
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :custom
      (doom-modeline-height 25)     ;; Sets modeline height
      (doom-modeline-bar-width 5)   ;; Sets right bar width
      (doom-modeline-persp-name t)  ;; Adds perspective name to modeline
      (doom-modeline-persp-icon t)) ;; Adds folder icon next to persp name
#+end_src
** Whichkey
#+begin_src emacs-lisp
      (use-package which-key
       :config
       (which-key-mode))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-startup-banner 'logo)
    (dashboard-center-content t)
    (dashboard-vertically-center-content t)
    ;; Nerd icons
    (dashboard-icon-type 'nerd-icons)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    ;; Show org agenda
    (add-to-list 'dashboard-items '(agenda) t)
    (dashboard-week-agenda t)
    :config
    (dashboard-setup-startup-hook))
#+end_src
* Org Mode
#+begin_src emacs-lisp
  (setq org-directory "~/persist/org/") ; Non-absolute paths for agenda and
  (setq org-agenda-files '("inbox.org" "work.org" "daybook.org" "notes.org"))
  (setq org-ellipsis "â¤µ")
  (setq org-tag-alist
        '(
          ;; locale
          (:startgroup)
          ("home" . ?h)
          ("work" . ?w)
          ("school" . ?s)
          (:endgroup)
  		("project")
  		("tech")))

  (use-package org
    :hook
    ((org-mode . org-indent-mode)
     (org-mode . visual-line-mode))  ; wrap lines at word breaks
    :config
    ;; Make org-open-at-point follow file links in the same window
    (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)
    (setq-default org-todo-keywords
    		'((sequence "TODO(t)" "WAIT(w@/!)" "STARTED(s)" "|" "DONE(d)" "CANCELED(c@)")))
    (setq org-log-done 'time)   
    ;; Clocking
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)
    
    ;; Refile configuration
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path 'file)

    (setq org-capture-templates
          '(("c" "Default Capture" entry (file "inbox.org")
             "* TODO %?\n%U\n%i")
            ("w" "Work")
            ("wt" "Work Todo" entry (file+headline "work.org" "Todos") "** TODO %?\n%U\n%i\n%a :work:")
    		  ("l" "Log Entry" entry (file+olp+datetree "~/org/daybook.org") "* %? %T")
  		  ("r" "Manual Cookbook" entry (file+headline "notes.org" "Recipes")
  		   "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")
  		  ("j" "Journal entry" entry (file+olp+datetree "notes.org" "Journal") "* %(format-time-string \"%H:%M\") \n %?")
  		  ("b" "Book" entry (file+headline "notes.org" "Books")
            "** TODO %^{Title}
                  :PROPERTIES:
                  :name:     %\\1
                  :author:   %^{Author}
                  :pages:    %^{Pages}
                  :rating:   %^{Rating}
                  :END:\n\n%?"
         :empty-lines 1)))

   (setq org-agenda-span 'day)
   (setq org-agenda-custom-commands
         '(("n" "Agenda and All Todos"
            ((agenda)
             (todo)))
           ("w" "Work" todo ""
            ((org-agenda-files '("work.org"))
  		   ))))
   ) 
#+end_src
** Org-Evil
#+begin_src emacs-lisp
  (use-package evil-org
         :ensure t
         :after org
         :hook (org-mode . (lambda () evil-org-mode))
         :config
         (require 'evil-org-agenda)
         (evil-org-agenda-set-keys))
#+end_src
** Org Tempo
#+begin_src emacs-lisp
    (use-package org-tempo
      :ensure nil
      :after org)
#+end_src
** Org Superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-hide-leading-stars t))
#+end_src
** Org Super Agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :after org-agenda
    :custom  (org-super-agenda-groups
  	    '(
  	      (:name "Overdue" :deadline past :order 0)
  	      (:name "Today" :time-grid t :order 3)  
  	      (:name "Personal" :tag ("home" "personal"))
  	      (:name "Due Soon" :deadline future :order 4)
            (:name "Todo" :order 5)
  		  (:name "Tect" :tag "tech" :order 6) 
  		  (:name "Projects" :tag "project" :order 7)
  	      (:name "Waiting" :todo ("WAITING" "HOLD") :order 9)))
    :config
    (setq org-super-agenda-header-map nil)
    (org-super-agenda-mode t))
  (setq org-agenda-custom-commands
  	  '(("o" "Overview"
  	         ((agenda "" ((org-agenda-span 'day)
  						  (org-super-agenda-groups
  						   '((:name "Today"
  									:time-grid t
  									:date today
  									:todo "TODAY"
  									:scheduled today
  									:order 1)))))
  			  (alltodo "" ((org-agenda-overriding-header "")
  						   (org-super-agenda-groups
  							'((:name "Important"    :tag "Important" :priority "A" :order 6)
  							  (:name "Due Today"    :deadline today  :order 2)
  							  (:name "Due Soon"     :deadline future :order 8)
  							  (:name "Overdue"      :deadline past   :face error :order 7)
  							  (:name "To read"      :tag "read"      :order 30)
  							  (:name "Waiting"      :todo "WAIT"     :order 20)
  							  (:name "Work"         :tag "work"      :order 32)
  							  (:name "Personal"     :tag "home"  :order 32)))))))))
    #+end_src
** org-journal
# #+begin_src emacs-lisp
#   (use-package org-journal
#     :init
#     ;; Change default prefix key; needs to be set before loading org-journal
#     (setq org-journal-prefix-key "C-c j ")
#     :config
#     (setq org-journal-dir "~/org/journal/"
#           org-journal-date-format "%Y-%m-%d %A"
#         	org-journal-file-type 'monthly
#           org-journal-file-header "%B"))
# #+end_src
** org-chef
Org-chef is a plugin, which can convert recipes from website to org
#+begin_src emacs-lisp
  (use-package org-chef)
#+end_src
** org-toc
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :hook (org-mode . toc-org-mode))
#+end_src
* Other
** Nerd Icons
#+begin_src emacs-lisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src
** Vertico and Marginalia
- Vertico: Provides a performant and minimalistic vertical completion UI based on the default completion system.
- Savehist: Saves completion history.
- Marginalia: Adds extra metadata for completions in the margins (like descriptions).
- Nerd-icons-completion: Adds icons to completion candidates using the built in completion metadata functions.

We use this packages, because they use emacs native functions. Unlike Ivy or Helm.
One alternative is ivy and counsel, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] for more inforomation.
#+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (savehist-mode) ;; Enables save history mode

    (use-package marginalia
      :after vertico
      :init
      (marginalia-mode))

    (use-package nerd-icons-completion
      :after marginalia
      :config
      (nerd-icons-completion-mode)
      :hook
      ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))
#+end_src

** Corfu
Enhances in-buffer completion with a small completion popup.
Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion.
#+begin_src emacs-lisp
    (use-package corfu
      ;; Optional customizations
      :custom
      (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)                 ;; Enable auto completion
      (corfu-auto-prefix 2)          ;; Minimum length of prefix for auto completion.
      (corfu-popupinfo-mode t)       ;; Enable popup information
      (corfu-popupinfo-delay 0.5)    ;; Lower popupinfo delay to 0.5 seconds from 2 seconds
      (corfu-separator ?\s)          ;; Orderless field separator, Use M-SPC to enter separator
      (completion-ignore-case t)
      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (tab-always-indent 'complete)
      (corfu-preview-current nil) ;; Don't insert completion without confirmation
      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      :init
      (global-corfu-mode))

    (use-package nerd-icons-corfu
      :after corfu
      :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape
Provides Completion At Point Extensions which can be used in combination with Corfu, Company or the default completion UI.
Notes:
- The functions that are added later will be the first in the completion list.
- Take care when adding Capfs (Completion-at-point-functions) to the list since each of the Capfs adds a small runtime cost.
Read the [[https://github.com/minad/cape#configuration][configuration section]] in Cape's readme for more information.
#+begin_src emacs-lisp
    (use-package cape
      :after corfu
      :init
      ;; Add to the global default value of `completion-at-point-functions' which is
      ;; used by `completion-at-point'.  The order of the functions matters, the
      ;; first function returning a result wins.  Note that the list of buffer-local
      ;; completion functions takes precedence over the global list.
      ;; The functions that are added later will be the first in the list

      (add-to-list 'completion-at-point-functions #'cape-dabbrev) ;; Complete word from current buffers
      (add-to-list 'completion-at-point-functions #'cape-dict) ;; Dictionary completion
      (add-to-list 'completion-at-point-functions #'cape-file) ;; Path completion
      (add-to-list 'completion-at-point-functions #'cape-elisp-block) ;; Complete elisp in Org or Markdown mode
      (add-to-list 'completion-at-point-functions #'cape-keyword) ;; Keyword/Snipet completion

      ;;(add-to-list 'completion-at-point-functions #'cape-abbrev) ;; Complete abbreviation
      ;;(add-to-list 'completion-at-point-functions #'cape-history) ;; Complete from Eshell, Comint or minibuffer history
      ;;(add-to-list 'completion-at-point-functions #'cape-line) ;; Complete entire line from current buffer
      ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol) ;; Complete Elisp symbol
      ;;(add-to-list 'completion-at-point-functions #'cape-tex) ;; Complete Unicode char from TeX command, e.g. \hbar
      ;;(add-to-list 'completion-at-point-functions #'cape-sgml) ;; Complete Unicode char from SGML entity, e.g., &alpha
      ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345) ;; Complete Unicode char using RFC 1345 mnemonics
      )
#+end_src

** Orderless
Completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.
Recomended for packages like vertico, corfu.
#+begin_src emacs-lisp
    (use-package orderless
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Rainbow Delimiters
Adds colors to brackets.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
